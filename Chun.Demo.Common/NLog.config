<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
    >
  <!--internalLogLevel="Off" internalLogFile="c:\temp\nlog-internal.log"-->
  <!-- optional, add some variables
  https://github.com/nlog/NLog/wiki/Configuration-file#variables
  -->
  <!--<variable name="myvar" value="myvalue"/>-->

  <!--
  See https://github.com/nlog/nlog/wiki/Configuration-file
  for information on customizing logging rules and outputs.
   -->
  <targets>

    <!--
    add your targets here
    See https://github.com/nlog/NLog/wiki/Targets for possible targets.
    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
    -->

    <!--
    Write events to a file with the date in the filename.
    <target xsi:type="File" name="f" fileName="${basedir}/logs/${shortdate}.log"
            layout="${longdate} ${uppercase:${level}} ${message}" />
    -->

    <target name="coloredConsole" xsi:type="ColoredConsole" useDefaultRowHighlightingRules="false"
        layout="${longdate} | Thread ${ThreadId} ${pad:padding=5:inner=${level:uppercase=true}} | ${message}" >
      <highlight-row condition="level == LogLevel.Debug" foregroundColor="Cyan" />
      <highlight-row condition="level == LogLevel.Info" foregroundColor="Gray" />
      <highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
      <highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
      <highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" backgroundColor="White" />
    </target>
    <!--<target name="control"
              xsi:type="RichTextBox"
              controlName="txtLoggerRich"
              autoScroll="true"
              formName="MainForm"
              useDefaultRowColoringRules="true"
              layout="${longdate}-${pad:padding=5:inner=${level:uppercase=true}    ${message}    ${onexception:||${exception}||${stacktrace}}">
    </target>-->
    <!--queueLimit="5000" overflowAction="Discard"-->
    <target name="file" xsi:type="AsyncWrapper">
      <target name="infoFile" xsi:type="File"
          layout="${longdate} | Thread ${ThreadId}  ${pad:padding=5:inner=${level:uppercase=true}} | ${message}"
          fileName="${basedir}/logs/info.log" keepFileOpen="false" 
          createDirs ="true"
          maxArchiveFiles="7"
          archiveEvery="Day"
          archiveFileName ="${basedir}/logs/info-{#}.log"
          archiveNumbering="Rolling"
              />
    </target>
  </targets>

  <rules>
    <!--<logger name="*" minlevel="Trace" writeTo="control" />-->
    <logger name="*" minlevel="Trace" writeTo="coloredConsole" >
      <!--<filters defaultAction='Log'>
           --><!--contains/ends-with/equals/length/starts-with/regex-matches(input, pattern, options)-->
             <!--
           <filters>
            <when condition="length('${message}') > 100" action="Ignore" />
            <when condition="equals('${logger}','MyApps.SomeClass')" action="Ignore" />
            <when condition="(level >= LogLevel.Debug and contains('${message}','PleaseDontLogThis')) or level==LogLevel.Warn" action="Ignore" />
            <when condition="not starts-with('${message}','PleaseLogThis')" action="Ignore" />
      </filters>-->
    </logger>
    <logger name="*" minlevel="Trace" writeTo="file" />
    <!-- add your logging rules here -->

    <!--
    Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)  to "f"
    <logger name="*" minlevel="Debug" writeTo="f" />
    -->
  </rules>
</nlog>


<!--autoReload="true"表示在不重新启动应用程序的情况下，修改配置文件，NLog会自动加载应用；
internalLogLevel="Trace"internalLogFile="logs/internalLog.txt"这个设置可以将NLog内部的日志消息写到应用程序目录下的logs文件夹里的internalLog.txt文件中；（这个配置常用于调试Nlog的配置是否正确，调试完成后，最好关闭以提高性能）
<target>的配置：type="File|Console" 属性是设置日志输出目标是"File"(文件)或者"Console"（控制台）；
type="File"的时候要指定fileName属性， fileName="${basedir}/logs/${shortdate}.log" 设置日记记录文件的路径和名称，即应用程序下的log目录里格式为yyyy-MM-DD.log；
layout="${date:format=yyyyMMddHHmmss} ${callsite} ${level} ${message}" 设置日志输出格式(可查阅官网说明).
name="NLogConsoleExample"表示配置的规则适用于Logger名称为“NLogConsoleExample”，如果填*，则表示所有的Logger都运用这个规则。
minlevel="Debug"maxlevel="Error"用来配置记录的级别为最小是"Debug"最大为"Error"(备注：此处也可以用levels="Debug,Error"来设置，说明只输出Debug级别以及Error级别的日志，官网此处解说有误：)
writeTo="t1,t2"其中t1,t2分别代表上面设置的targets名称为t1以及t2的目标输出，此处表示将分别将日志信息输出到文件和控制台。-->
